{"version":3,"file":"static/js/779.293a83da.chunk.js","mappings":"wQAEaA,EAAWC,EAAAA,GAAAA,GAAH,0JASRC,EAAaD,EAAAA,GAAAA,GAAH,gDAGVE,EAAaF,EAAAA,GAAAA,GAAH,8EAKVG,EAASH,EAAAA,GAAAA,KAAH,6CAGNI,EAAWJ,EAAAA,GAAAA,KAAH,6C,SCVN,SAASK,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACIC,GAASC,EAAAA,EAAAA,MAMb,OALAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBH,EAAOI,SAASC,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACtCP,EAAWO,QAEZ,CAACN,EAAOI,UACY,IAAnBN,EAAQS,OACHC,IAAAA,OAAAA,QAAwB,oCAG/B,wBACGV,EAAQW,KAAI,YAA0C,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,WAAYC,EAAS,EAATA,GACvCC,EAAOF,EAAWG,OAAO,EAAG,IAC5BC,EAAOJ,EAAWG,OAAO,GAAI,GACjC,OACE,UAACzB,EAAD,YACE,UAACE,EAAD,YACE,SAACC,EAAD,WACE,SAACC,EAAD,UAASgB,OAEX,UAACjB,EAAD,qBACQ,SAACE,EAAD,UAAWmB,QAEnB,UAACrB,EAAD,qBACQ,SAACE,EAAD,UAAWqB,WAGrB,0BACE,uBAAIL,QAbOE","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  border-bottom: 1px solid black;\n  padding: 5px;\n  background: #fff;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nexport const ReviewList = styled.ul`\n  margin-bottom: 20px;\n`;\nexport const ReviewItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\nexport const Author = styled.span`\n  font-weight: 700;\n`;\nexport const DateTime = styled.span`\n  font-weight: 500;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'components/auth/movieAuth';\nimport Notiflix from 'notiflix';\nimport {\n  ListItem,\n  Author,\n  DateTime,\n  ReviewItem,\n  ReviewList,\n} from './Reviews.styled';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  let params = useParams();\n  useEffect(() => {\n    getMovieReviews(params.movieId).then(({ results }) => {\n      setReviews(results);\n    });\n  }, [params.movieId]);\n  if (reviews.length === 0) {\n    return Notiflix.Notify.failure('No reviews found for this movie');\n  }\n  return (\n    <ul>\n      {reviews.map(({ author, content, created_at, id }) => {\n        let date = created_at.substr(0, 10);\n        let time = created_at.substr(11, 5);\n        return (\n          <ListItem key={id}>\n            <ReviewList>\n              <ReviewItem>\n                <Author>{author}</Author>\n              </ReviewItem>\n              <ReviewItem>\n                Date: <DateTime>{date}</DateTime>\n              </ReviewItem>\n              <ReviewItem>\n                Time: <DateTime>{time}</DateTime>\n              </ReviewItem>\n            </ReviewList>\n            <div>\n              <p>{content}</p>\n            </div>\n          </ListItem>\n        );\n      })}\n    </ul>\n  );\n}\n"],"names":["ListItem","styled","ReviewList","ReviewItem","Author","DateTime","Reviews","useState","reviews","setReviews","params","useParams","useEffect","getMovieReviews","movieId","then","results","length","Notiflix","map","author","content","created_at","id","date","substr","time"],"sourceRoot":""}